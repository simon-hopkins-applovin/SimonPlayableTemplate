
// -- user code here --

/* --- start generated code --- */

// Generated by  1.5.4 (Phaser v2.6.2)


/**
 * BNBBlock_Triangle.
 * @param {Phaser.Game} aGame A reference to the currently running game.
 * @param {Phaser.Group} aParent The parent Group (or other {@link DisplayObject}) that this group will be added to.    If undefined/unspecified the Group will be added to the {@link Phaser.Game#world Game World}; if null the Group will not be added to any parent.
 * @param {string} aName A name for this group. Not used internally but useful for debugging.
 * @param {boolean} aAddToStage If true this group will be added directly to the Game.Stage instead of Game.World.
 * @param {boolean} aEnableBody If true all Sprites created with {@link #create} or {@link #createMulitple} will have a physics body created on them. Change the body type with {@link #physicsBodyType}.
 * @param {number} aPhysicsBodyType The physics body type to use when physics bodies are automatically added. See {@link #physicsBodyType} for values.
 */
function BNBBlock_Triangle(aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType) {
	
	Phaser.Group.call(this, aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType);
	var __visualParent = this.game.add.group(this);
	
	var __shadow = this.game.add.sprite(0.0, 5.0, 'square', null, __visualParent);
	__shadow.anchor.set(0.5, 0.5);
	
	var __visual = this.game.add.sprite(0.0, 0.0, 'square', null, __visualParent);
	__visual.anchor.set(0.5, 0.5);
	
	var __flash = this.game.add.sprite(0.0, 0.0, 'square', null, __visualParent);
	__flash.anchor.set(0.5, 0.5);
	
	var __highlight = this.game.add.sprite(0.0, 0.0, 'square', null, __visualParent);
	__highlight.anchor.set(0.5, 0.5);
	
	
	
	// fields
	
	this.f_visualParent = __visualParent;
	this.f_shadow = __shadow;
	this.f_visual = __visual;
	this.f_flash = __flash;
	this.f_highlight = __highlight;
	
	this.afterCreate();
	
}

/** @type Phaser.Group */
var BNBBlock_Triangle_proto = Object.create(Phaser.Group.prototype);
BNBBlock_Triangle.prototype = BNBBlock_Triangle_proto;
BNBBlock_Triangle.prototype.constructor = BNBBlock_Triangle;

/* --- end generated code --- */
// -- user code here --


BNBBlock_Triangle.prototype = Object.create(BNBBlock.prototype);
BNBBlock_Triangle.prototype.constructor = BNBBlock_Triangle;

BNBBlock_Triangle.prototype.initialize = function(assocBoard, colliderBounds, visualBounds, colorData, particleQueue, angle){
	BNBBlock.prototype.initialize.call(this, assocBoard, colliderBounds, visualBounds, colorData, particleQueue);
	if(this.empty){
		return;
	}
	angle = angle==undefined?0:angle;
	var newCollider = new Phaser.Polygon(this.collider.topLeft, this.collider.bottomRight, this.collider.bottomLeft);
	newCollider.rotateAround(this.collider.centerX, this.collider.centerY, angle);
	newCollider.points.forEach(function(p){
		p.x = p.x<this.collider.centerX?this.collider.left:this.collider.right;
		p.y = p.y<this.collider.centerY?this.collider.top:this.collider.bottom;
	}, this);
	this.collider = newCollider;
	var dc = this.game.add.graphics(0,0);
	//this.add(dc);
	dc.beginFill(0xff0000);
	//dc.drawShape()
	dc.drawShape(this.collider);
	this.mask = dc;
};