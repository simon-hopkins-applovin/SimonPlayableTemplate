
// -- user code here --

/* --- start generated code --- */

// Generated by  1.5.4 (Phaser v2.6.2)


/**
 * Card.
 * @param {Phaser.Game} aGame A reference to the currently running game.
 * @param {Phaser.Group} aParent The parent Group (or other {@link DisplayObject}) that this group will be added to.    If undefined/unspecified the Group will be added to the {@link Phaser.Game#world Game World}; if null the Group will not be added to any parent.
 * @param {string} aName A name for this group. Not used internally but useful for debugging.
 * @param {boolean} aAddToStage If true this group will be added directly to the Game.Stage instead of Game.World.
 * @param {boolean} aEnableBody If true all Sprites created with {@link #create} or {@link #createMulitple} will have a physics body created on them. Change the body type with {@link #physicsBodyType}.
 * @param {number} aPhysicsBodyType The physics body type to use when physics bodies are automatically added. See {@link #physicsBodyType} for values.
 */
function Card(aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType) {
	
	Phaser.Group.call(this, aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType);
	var __backing = this.game.add.sprite(0.0, 0.0, '4H', null, this);
	__backing.anchor.set(0.5, 0.5);
	
	var __debugText = new webfontGEOText(this.game, 0.0, -29.0);
	this.add(__debugText);
	
	
	
	// fields
	
	this.f_backing = __backing;
	this.f_debugText = __debugText;
	
}

/** @type Phaser.Group */
var Card_proto = Object.create(Phaser.Group.prototype);
Card.prototype = Card_proto;
Card.prototype.constructor = Card;

/* --- end generated code --- */
// -- user code here --


Card.prototype.initialize = function( _number, _suit){
	this.number = _number;
	this.suit = _suit;
	var suitChar = '';
	switch(this.suit){
		case SUITS.HEARTS:
			suitChar = 'H';
			break;
		case SUITS.SPADES:
			suitChar = 'S';
			break;
		case SUITS.CLUBS:
			suitChar = 'C';
			break;
		case SUITS.DIAMONDS:
			suitChar = 'D';
			break;
		default:
			suitChar = 'H';
	};
	var textureKey = this.number.toString() + suitChar;
	if(this.game.cache.checkKey(Phaser.Cache.IMAGE, textureKey)){
		console.log("success");
		this.f_backing.loadTexture(textureKey);
	}else{
		this.f_backing.loadTexture("Blue Card Back");
	}
	this.f_backing
	
	this.f_debugText.setText(this.toString());
	
};

Card.prototype.clone = function(){
	
	var newCard = new Card(this.game);
	newCard.initialize(this.number, this.suit);
	return newCard;
}


Card.prototype.toString = function(){
	var numChar = '';
	var suitChar = '';
	
	switch(this.number){
		case 11:
			numChar = 'J';
			break;
		case 12:
			numChar = 'Q';
			break;
		case 13:
			numChar = 'K';
			break;
		case 14:
			numChar = 'A';
			break;
		default:
			numChar = this.number.toString();
	};
	switch(this.suit){
		case SUITS.SPADES:
			suitChar = '♠';
			break;
		case SUITS.CLUBS:
			suitChar = '♣';
			break;
		case SUITS.HEARTS:
			suitChar = '♥';
			break;
		case SUITS.DIAMONDS:
			suitChar = '♦';
			break;
		default:
			suitChar = "?";
	};
	
	
	return numChar + suitChar;

};

Card.prototype.equals = function(_num, _suit){
	
	if(_num instanceof Card){
		_suit = _num.suit;
		_num = _num.number;
	}

	return this.number == _num && this.suit == _suit;
};















