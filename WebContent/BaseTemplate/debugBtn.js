// -- user code here --

/* --- start generated code --- */

// Generated by  1.5.3 (Phaser v2.6.2)

/**
 * debugBtn
 * 
 * @param {Phaser.Game}
 *            aGame A reference to the currently running game.
 * @param {Number}
 *            aX The x coordinate (in world space) to position the Sprite at.
 * @param {Number}
 *            aY The y coordinate (in world space) to position the Sprite at.
 * @param {any}
 *            aKey This is the image or texture used by the Sprite during
 *            rendering. It can be a string which is a reference to the Cache
 *            entry, or an instance of a RenderTexture or PIXI.Texture.
 * @param {any}
 *            aFrame If this Sprite is using part of a sprite sheet or texture
 *            atlas you can specify the exact frame to use by giving a string or
 *            numeric index.
 */
function debugBtn(aGame, aX, aY, aKey, aFrame) {
	Phaser.Sprite.call(this, aGame, aX, aY, aKey || 'debugBtn',
			aFrame == undefined || aFrame == null ? null : aFrame);
	this.fixedToCamera = true;
	this.anchor.setTo(0.5, 0.5);

	this.textObj;
	this.level = this.game.state.getCurrentState();
	Global.ButtonObjs.push(this);
	this.events.onInputDown.add(this.ButtonPress, this);
	this.inputEnabled = true;

}

/** @type Phaser.Sprite */
var debugBtn_proto = Object.create(Phaser.Sprite.prototype);
debugBtn.prototype = debugBtn_proto;
debugBtn.prototype.constructor = debugBtn;

/* --- end generated code --- */
// -- user code here --
debugBtn.prototype.ButtonPress = function() {
	var tempLevel = this.level;
	// restart button
	if (this.tag == "Restart") {
		AppLovin.restart(this);
	} else if (this.tag == "RandomLangTest") {
		//console.log(makeid(3));
		Global.LangCode = makeid(3);
		Global.webfontGEOTextObjs.forEach(function(element) {
			element.setLanguage();
			tempLevel.customGEOAdjustments(element);
		});
	}
	// dev custom buttons
	else if (Global.customDebugButtons.includes(this.tag)) {
		this.level.customDebugButtons(this.tag);
	}
	// GEO buttons
	else {
		Global.LangCode = this.tag;
		Global.webfontGEOTextObjs.forEach(function(element) {
			element.setLanguage();
			tempLevel.customGEOAdjustments(element);
		});
		Global.GEOImageObjs.forEach(function(element) {
			element.setLanguage();
			tempLevel.customGEOAdjustments(element);
		});
	}

	// Destroy the Debug Buttons
	Global.ButtonObjs.forEach(function(element) {
		element.textObj.destroy();
		element.destroy();
	});

	// Resets the debug variables
	Global.debugPress.one = Global.debugPress.shift = Global.debugPress.ctrl = 0;
};

function makeid(length) {
	   var result           = '';
	   var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
	   var charactersLength = characters.length;
	   for ( var i = 0; i < length; i++ ) {
	      result += characters.charAt(Math.floor(Math.random() * charactersLength));
	   }
	   return result;
}